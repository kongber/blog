import{_ as d,c as r,b as t,a as s,d as o,w as e,e as n,r as u,o as m}from"./app-G7cDrxo-.js";const a={};function p(g,l){const i=u("RouteLink");return m(),r("div",null,[l[24]||(l[24]=t("h2",{id:"_1-设计原则",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_1-设计原则"},[t("span",null,"1. 设计原则")])],-1)),l[25]||(l[25]=t("p",null,"7 大设计原则",-1)),t("table",null,[l[17]||(l[17]=t("thead",null,[t("tr",null,[t("th",null,"设计原则"),t("th",null,"核心思想"),t("th",null,"示例/说明")])],-1)),t("tbody",null,[l[15]||(l[15]=t("tr",null,[t("td",null,"单一职责原则 (SRP)"),t("td",null,"一个类只负责一个功能领域中的相应职责"),t("td",null,"将包含数据库连接、CRUD操作、数据导出的类拆分成三个独立的类")],-1)),l[16]||(l[16]=t("tr",null,[t("td",null,"开闭原则 (OCP)"),t("td",null,"软件实体应该对扩展开放，对修改关闭"),t("td",null,"新增功能时通过扩展代码实现，而不是修改原有代码")],-1)),t("tr",null,[t("td",null,[o(i,{to:"/notes/B.se/B3.design/mode/LSP.html"},{default:e(()=>l[0]||(l[0]=[n("里氏替换原则 (LSP)")])),_:1})]),l[1]||(l[1]=t("td",null,"子类必须能够替换其基类",-1)),l[2]||(l[2]=t("td",null,[n("子类可以扩展父类功能，但不能改变原有功能"),t("br"),n(" 子类出现的地方，父类一定能够替换")],-1))]),t("tr",null,[t("td",null,[o(i,{to:"/notes/B.se/B3.design/mode/ISP.html"},{default:e(()=>l[3]||(l[3]=[n("接口隔离原则 (ISP)")])),_:1})]),l[4]||(l[4]=t("td",null,"使用多个专门的接口，而不使用单一的总接口",-1)),l[5]||(l[5]=t("td",null,[n("客户端不应依赖不需要的接口"),t("br"),n(" 类之间的依赖应建立在最小接口上")],-1))]),t("tr",null,[t("td",null,[o(i,{to:"/notes/B.se/B3.design/mode/DIP.html"},{default:e(()=>l[6]||(l[6]=[n("依赖倒置原则 (DIP)")])),_:1})]),l[7]||(l[7]=t("td",null,"高层模块不应依赖低层模块，两者都应依赖其抽象",-1)),l[8]||(l[8]=t("td",null,[n("抽象不应依赖细节，细节应依赖抽象"),t("br"),n(" 面向接口编程，而不是面向实现编程")],-1))]),t("tr",null,[t("td",null,[o(i,{to:"/notes/B.se/B3.design/mode/LoD.html"},{default:e(()=>l[9]||(l[9]=[n("迪米特法则 (LoD)")])),_:1})]),l[10]||(l[10]=t("td",null,"一个对象应该对其他对象保持最少的了解",-1)),l[11]||(l[11]=t("td",null,[n("只与直接朋友交谈，降低类与类之间的耦合度；"),t("br")],-1))]),t("tr",null,[t("td",null,[o(i,{to:"/notes/B.se/B3.design/mode/CARP.html"},{default:e(()=>l[12]||(l[12]=[n("组合/聚合复用原则 (CARP)")])),_:1})]),l[13]||(l[13]=t("td",null,"尽量使用组合/聚合，而不是继承关系达到复用目的",-1)),l[14]||(l[14]=t("td",null,[n("避免继承导致的高耦合"),t("br"),n(" 使用组合和聚合使系统更灵活")],-1))])])]),l[26]||(l[26]=t("h2",{id:"_2-设计模式",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_2-设计模式"},[t("span",null,"2. 设计模式")])],-1)),l[27]||(l[27]=t("p",null,"设计模式是软件开发中常见问题的典型解决方案。它们是经过反复验证的代码设计经验的总结，能够帮助我们写出更加可维护和可扩展的代码。",-1)),l[28]||(l[28]=t("p",null,"23 种设计模式",-1)),l[29]||(l[29]=t("h3",{id:"_2-1-创建型模式",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_2-1-创建型模式"},[t("span",null,"2.1 创建型模式")])],-1)),t("ul",null,[t("li",null,[o(i,{to:"/notes/B.se/B3.design/mode/Singleton.html"},{default:e(()=>l[18]||(l[18]=[n("单例模式（Singleton）")])),_:1}),l[19]||(l[19]=n("：确保一个类只有一个实例，并提供全局访问点。"))]),l[20]||(l[20]=t("li",null,"工厂方法（Factory Method）：定义一个用于创建对象的接口，但让子类决定实例化哪个类。",-1)),l[21]||(l[21]=t("li",null,"抽象工厂（Abstract Factory）：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。",-1)),l[22]||(l[22]=t("li",null,"建造者（Builder）：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。",-1)),l[23]||(l[23]=t("li",null,"原型（Prototype）：通过复制现有实例来创建新对象，而无需通过实例化类来完成。",-1))]),l[30]||(l[30]=s('<h3 id="_2-2-结构型模式" tabindex="-1"><a class="header-anchor" href="#_2-2-结构型模式"><span>2.2 结构型模式</span></a></h3><ul><li>适配器（Adapter）：将一个类的接口转换成客户希望的另一个接口，使原本由于接口不兼容而不能一起工作的类能够一起工作。</li><li>桥接（Bridge）：将抽象部分与实现部分分离，使它们都可以独立地变化。</li><li>装饰（Decorator）：动态地给一个对象添加一些额外的职责，而不会影响其他对象。</li><li>外观（Facade）：为子系统中的一组接口提供一个一致的界面，使子系统更加易用。</li><li>享元（Flyweight）：运用共享技术有效地支持大量细粒度的对象。</li><li>代理（Proxy）：为其他对象提供一个代理以控制对这个对象的访问。</li><li>组合（Composite）：将对象组合成树形结构以表示“部分-整体”的层次结构。</li></ul><h3 id="_2-3-行为型模式" tabindex="-1"><a class="header-anchor" href="#_2-3-行为型模式"><span>2.3 行为型模式</span></a></h3><ul><li>观察者（Observer）：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。</li><li>策略（Strategy）：定义一系列算法，将每个算法封装起来，并使它们可以相互替换。</li><li>模板方法（Template Method）：定义一个算法的骨架，将一些步骤延迟到子类中实现。</li><li>命令（Command）：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化。</li><li>状态（State）：允许一个对象在其内部状态改变时改变它的行为。</li><li>职责链（Chain of Responsibility）：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</li><li>解释器（Interpreter）：给定一个语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。</li><li>中介者（Mediator）：定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。</li><li>访问者（Visitor）：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</li><li>备忘录（Memento）：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</li><li>迭代器（Iterator）：提供一种方法来访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</li></ul>',4))])}const B=d(a,[["render",p]]),f=JSON.parse('{"path":"/notes/B.se/B3.design/mode/","title":"设计模式","lang":"zh-CN","frontmatter":{"title":"设计模式"},"readingTime":{"minutes":4.38,"words":1314},"git":{"updatedTime":1747214024000,"contributors":[{"name":"Kongber","username":"Kongber","email":"kongmongolia@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/Kongber?v=4","url":"https://github.com/Kongber"}]},"filePathRelative":"notes/B.se/B3.design/mode/README.md","headers":[],"categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"6156bd","sort":10001,"name":"B.se"},{"id":"54572d","sort":10002,"name":"B3.design"},{"id":"18e197","sort":10003,"name":"mode"}]}');export{B as comp,f as data};
