import{_ as s,c as l,a,o as n}from"./app-CxwMiOet.js";const h={};function e(t,i){return n(),l("div",null,i[0]||(i[0]=[a(`<h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>软件测试是软件质量保证的关键活动，通过系统化的测试过程发现软件缺陷，确保软件质量。</p><h2 id="_2-测试分类" tabindex="-1"><a class="header-anchor" href="#_2-测试分类"><span>2. 测试分类</span></a></h2><h3 id="_2-1-测试阶段划分" tabindex="-1"><a class="header-anchor" href="#_2-1-测试阶段划分"><span>2.1 测试阶段划分</span></a></h3><ul><li>单元测试 ：测试最小的可测试单元</li><li>集成测试 ：测试多个模块之间的接口</li><li>系统测试 ：测试整个系统的功能和性能</li><li>验收测试 ：与用户进行交互，验证系统是否满足需求</li></ul><h3 id="_2-2-测试方法划分" tabindex="-1"><a class="header-anchor" href="#_2-2-测试方法划分"><span>2.2 测试方法划分</span></a></h3><ul><li>动态测试 ：执行程序，验证功能和性能不执行程序，仅分析代码结构和逻辑 <ul><li>白盒测试：基于代码结构进行测试，控制流测试、数据流测试、程序变异测试。</li><li>黑盒测试：不考虑内部结构，仅关注功能和性能，集成测试。</li><li>灰盒测试：结合内部结构和外部行为进行测试，边界值分析。</li></ul></li><li>静态测试 ：不执行程序，仅分析代码结构和逻辑 <ul><li>桌前检查：在测试前，检查代码是否符合规范。</li><li>代码审查：审查代码结构和逻辑。</li><li>代码走查：检查代码的执行过程。</li></ul></li></ul><h3 id="_2-3-测试目的" tabindex="-1"><a class="header-anchor" href="#_2-3-测试目的"><span>2.3 测试目的</span></a></h3><ul><li>功能测试：验证软件是否满足需求规格说明书。</li><li>性能测试：验证软件在各种负载下的性能表现。 <ul><li>负载测试：验证软件在高负载下的性能表现。</li><li>压力测试：系统的瓶颈或不能接受的性能点。（上限）</li><li>强度测试：系统资源特别低的情况下，测试软件的极限性能。（下限）</li><li>并发测试：同时在线的最大用户数。</li><li>可靠性测试：MTTF、MTTR、MTBF。</li><li>负载均衡测试：验证软件在分布式环境下的性能表现。</li></ul></li><li>安全性测试：验证软件是否存在安全漏洞。</li><li>兼容性测试：验证软件在不同平台和设备上的兼容性。</li><li>可用性测试：验证软件在各种使用场景下的可用性。</li></ul><p>软件可靠性计算：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">$$</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">\\(串联系统的可靠性</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">): R = R_{</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">1}</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> *</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> R_{</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">}</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> *</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ...</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> *</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">R_{n}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">$$</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">$$</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">\\text(并联系统的可靠性</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">): R = 1 - (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> R_{</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> R_{</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">) </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">... </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> R_{n}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">$$</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-测试流程" tabindex="-1"><a class="header-anchor" href="#_3-测试流程"><span>3. 测试流程</span></a></h2><ul><li><p>测试计划</p></li><li><p>确定测试范围</p></li><li><p>制定测试策略</p></li><li><p>分配测试资源</p></li><li><p>测试设计</p></li><li><p>设计测试用例</p></li><li><p>准备测试数据</p></li><li><p>设计测试脚本</p></li><li><p>测试执行</p></li><li><p>执行测试用例</p></li><li><p>记录测试结果</p></li><li><p>跟踪缺陷修复</p></li><li><p>测试评估</p></li><li><p>分析测试结果</p></li><li><p>评估测试覆盖率</p></li><li><p>生成测试报告</p></li></ul><h2 id="_4-测试工具" tabindex="-1"><a class="header-anchor" href="#_4-测试工具"><span>4. 测试工具</span></a></h2><ul><li>单元测试框架 ：JUnit, TestNG, PyTest</li><li>性能测试工具 ：JMeter, LoadRunner</li><li>自动化测试工具 ：Selenium, Appium</li><li>缺陷管理工具 ：JIRA, Bugzilla</li><li>测试管理工具 ：TestLink, qTest</li></ul><h2 id="_5-测试方法" tabindex="-1"><a class="header-anchor" href="#_5-测试方法"><span>5. 测试方法</span></a></h2><ul><li>回归测试 ：确保新修改不影响现有功能</li><li>冒烟测试 ：快速验证主要功能</li><li>探索性测试 ：根据测试人员经验进行测试</li><li>负载测试 ：测试系统在负载下的表现</li><li>压力测试 ：测试系统的极限承受能力</li></ul><h2 id="_6-测试报告" tabindex="-1"><a class="header-anchor" href="#_6-测试报告"><span>6. 测试报告</span></a></h2><ul><li>测试计划</li><li>测试用例</li><li>测试报告</li><li>缺陷报告</li><li>测试总结</li></ul><h2 id="测试标准" tabindex="-1"><a class="header-anchor" href="#测试标准"><span>测试标准</span></a></h2><ul><li>GB/T 15532-2008 计算机软件测试规范</li><li>GB/T 28827-2012 软件工程 软件生存周期过程 测试</li><li>GB/T 25000.51-2016 系统与软件工程 系统与软件质量要求和评价</li><li>GB/T 31490-2015 软件工程 软件测试文档</li><li>GB/T 21567-2008 软件测试人员资质要求</li></ul>`,21)]))}const k=s(h,[["render",e]]),r=JSON.parse('{"path":"/notes/B.se/B4.testing/","title":"软件测试","lang":"zh-CN","frontmatter":{"title":"软件测试"},"readingTime":{"minutes":2.94,"words":883},"git":{"updatedTime":1747299790000,"contributors":[{"name":"Kongber","username":"Kongber","email":"kongmongolia@gmail.com","commits":3,"avatar":"https://avatars.githubusercontent.com/Kongber?v=4","url":"https://github.com/Kongber"}]},"filePathRelative":"notes/B.se/B4.testing/README.md","headers":[],"categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"6156bd","sort":10001,"name":"B.se"},{"id":"b7875f","sort":10013,"name":"B4.testing"}]}');export{k as comp,r as data};
