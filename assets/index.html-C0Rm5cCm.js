import{_ as l,c as r,a,d as e,b as s,w as h,r as n,o,e as p}from"./app-G7cDrxo-.js";const c={};function b(u,t){const i=n("Mermaid"),d=n("RouteLink");return o(),r("div",null,[t[1]||(t[1]=a('<h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><h3 id="_1-1-数据库" tabindex="-1"><a class="header-anchor" href="#_1-1-数据库"><span>1.1 数据库</span></a></h3><p>数据库 (Database) 是长期存储在计算机内的、有组织的、可共享的大量数据的集合。</p><h3 id="_1-2-数据库管理系统" tabindex="-1"><a class="header-anchor" href="#_1-2-数据库管理系统"><span>1.2 数据库管理系统</span></a></h3><p>数据库管理系统 (Database Management System) 是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，简称 DBMS。</p><p><strong>DBMS 按数据模型划分:</strong></p><ul><li>关系模型 DBMS：MySQL，Oracle，SQL Server。</li><li>文档性 DBMS：MongoDB。</li><li>键值型 DBMS：Redis。</li><li>对象型 DBMS：ObjectDB，db4o。</li></ul><h3 id="_1-3-数据库系统" tabindex="-1"><a class="header-anchor" href="#_1-3-数据库系统"><span>1.3 数据库系统</span></a></h3><p>数据库系统是由数据库、数据库管理系统、应用程序和数据库管理员组成的系统。</p><h2 id="_2-数据库模式与范式" tabindex="-1"><a class="header-anchor" href="#_2-数据库模式与范式"><span>2. 数据库模式与范式</span></a></h2>',10)),e(i,{id:"mermaid-49",code:"eJxTVa3OzMsssVKoVk/LyS9PzkgsKlEH8fLyU1KDCxKTM/PSgXxTAx0F9aLEvGw0obT8vJLgzKpUIN8QxC/PTCnJAHMMamtrVVW50osSCzIUQlwUuBSAwDH6+ZQVzzq2G8Yq6Ora1bxY3vZ09j7DGgUnjadLpj1bsfDpnn79p2snQFgKYZmp5Qo+qWWpOZoQ3UZQ7UbI2o2A2qGmG0Pl9fT0kFXkwVU4gUQVnKOfLWt6un8r1MKXDbtf7JsItdM5Py85taCkNDEHYnMsWJ8zWJ9L9NO2VrgrZzxtWgHV5JlXklqUh6rFBazFNVrjeefK5xPaIOpfrNv3dEm7ZiwXAA0rmjU="}),t[2]||(t[2]=a(`<h3 id="_2-1-三级模式" tabindex="-1"><a class="header-anchor" href="#_2-1-三级模式"><span>2.1 三级模式</span></a></h3><ul><li>外模式（用户模式）：用户与数据库系统的接口，由若干个外部记录类型组成</li><li>模式（概念模式）：数据库中全体数据的逻辑结构和特征的描述，由若干个概念记录类型组成，只涉及行的描述，不涉及具体的值。</li><li>内模式（存储模式）：数据物理结构和存储方式的描述，是数据在数据库内部的表示方式，定义所有的内部记录类型、索引和文件的组织方式以及数据控制方面的细节。</li></ul><h3 id="_2-2-两级映像" tabindex="-1"><a class="header-anchor" href="#_2-2-两级映像"><span>2.2 两级映像</span></a></h3><p>数据库系统在三级模式之间提供了两级映像。</p><ul><li>模式/内模式映像 。该映像存在于概念级和内部级之间，实现了概念模式到内模式之间的相互转换。（ 物理独立性 ）</li><li>外模式/模式映像 。该映像存在于外部级和概念级之间，实现了外模式到概念模式之间的相互转换。（ 逻辑独立性 ）</li></ul><h3 id="_2-3-数据库规范化" tabindex="-1"><a class="header-anchor" href="#_2-3-数据库规范化"><span>2.3 数据库规范化</span></a></h3><p>关系模型满足的确定约束条件称为范式，根据满足约束条件的级别不同，范式由低到高依次为：1NF、2NF、3NF、BCNF 等。 将第一级的关系模式转换为第二级的关系模式的过程称为规范化。规范化需要遵循两个准则：</p><ul><li>无损连接性。信息不失真（不增减信息）</li><li>函数依赖保持性，不破坏属性间存在的依赖关系。</li></ul><h4 id="_2-3-1-函数依赖" tabindex="-1"><a class="header-anchor" href="#_2-3-1-函数依赖"><span>2.3.1 函数依赖</span></a></h4><p>函数依赖：设 X、Y 是关系模式 R 的属性集，X -&gt; Y 表示 X 决定 Y。</p><p>例如：记录职工信息的结构如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>职工工号（EMP_NO）</span></span>
<span class="line"><span>职工姓名（EMP_NMAE）</span></span>
<span class="line"><span>所在部门（DEPT）。</span></span>
<span class="line"><span>则说 EMP_NO 函数决定 EMP_NMAE 和 DEPT，或者说 EMP_NMAE，DEPT 函数依赖</span></span>
<span class="line"><span>于 EMP_NO，记为：EMP_NO -&gt; EMP_NMAE，EMP_NO -&gt; DEPT。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-2-范式" tabindex="-1"><a class="header-anchor" href="#_2-3-2-范式"><span>2.3.2 范式</span></a></h4><ul><li>第一范式（1NF）：属性不可分。</li></ul><table><thead><tr><th>职工工号</th><th>职工姓名</th><th>住址 (不满足 1NF)</th></tr></thead><tbody><tr><td>32060231</td><td>张晓明</td><td>江苏省南通市人民路 56 号[226001]</td></tr></tbody></table><p>住址可以拆分，不满足 1NF。</p><ul><li>第二范式（2NF）：范式属于 1NF，并且所有非主属性都完全函数依赖于主键。</li></ul><table><thead><tr><th>学号</th><th>课程号</th><th>学生姓名</th><th>课程名称</th><th>成绩</th><th>学分</th></tr></thead><tbody><tr><td>2001</td><td>C001</td><td>张三</td><td>数据库</td><td>90</td><td>3</td></tr></tbody></table><p>主键（学号，课程号），学生姓名 -&gt; 学号，课程名称 -&gt; 课程号。不是完全依赖于主键（学号，课程号）。</p><ul><li>第三范式（3NF）：要求消除非主属性对主键的传递依赖。</li></ul><table><thead><tr><th>学号</th><th>课程号</th><th>学生姓名</th><th>系名</th><th>系主任</th></tr></thead><tbody><tr><td>2001</td><td>C001</td><td>张三</td><td>计算机系</td><td>王主任</td></tr></tbody></table><p>存在以下依赖关系：（学号，课程号）→ 学生姓名，（学号，课程号）→ 系名，系名 → 系主任。</p><ul><li>巴斯-科德范式（BCNF）：属性不传递依赖于主键，且所有非主属性都与主键有完全依赖关系。</li></ul><p>将传递依赖分表进行存储。</p><h2 id="_3-数据库设计" tabindex="-1"><a class="header-anchor" href="#_3-数据库设计"><span>3. 数据库设计</span></a></h2><p>基于 3NF 的数据库设计方法</p><table><thead><tr><th>阶段</th><th>任务</th><th>关键步骤</th></tr></thead><tbody><tr><td><strong>需求分析</strong></td><td>收集用户需求</td><td>确定数据需求、业务规则、功能需求</td></tr><tr><td><strong>概念结构设计</strong></td><td>设计E-R图</td><td>识别实体、属性、关系，构建实体-关系模型</td></tr><tr><td><strong>逻辑结构设计</strong></td><td>规范化处理（3NF）</td><td>将E-R图转换为关系模式，消除冗余（1NF→2NF→3NF）</td></tr><tr><td><strong>存储模式设计</strong></td><td>优化存储与查询</td><td>设计表结构、索引、查询优化策略</td></tr><tr><td><strong>物理结构设计</strong></td><td>确定物理存储方案</td><td>选择存储介质、分配存储空间、优化I/O性能</td></tr><tr><td><strong>数据库实现</strong></td><td>创建数据库并导入数据</td><td>建库、建表、数据迁移、完整性约束</td></tr></tbody></table><h2 id="_4-数据库保护" tabindex="-1"><a class="header-anchor" href="#_4-数据库保护"><span>4. 数据库保护</span></a></h2><h3 id="_4-1-事务" tabindex="-1"><a class="header-anchor" href="#_4-1-事务"><span>4.1 事务</span></a></h3><p>数据库系统运行的基本工作单位是事务。事务相当于操作系统中的进程，是用户定义的一个操作序列，这些操作序列要么全部执行，要么全部不执行，是一个不可分割的工作单位。事务具有以下特征：</p><ul><li>原子性：数据库的逻辑工作单位。</li><li>一致性：事务必须使数据库从一个一致性状态变换到另一个一致性状态。</li><li>隔离性：一个事务的执行不能被其他事务干扰。</li><li>持续性：一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。</li></ul><p>事务通常以 BEGIN TRANSACTION（事务开始）语句开始，以 COMMIT 或 ROLLBACK 语句结束。</p><h3 id="_4-2-保护措施" tabindex="-1"><a class="header-anchor" href="#_4-2-保护措施"><span>4.2 保护措施</span></a></h3><p>数据库保护的 4 种措施：</p><ul><li>数据库的恢复：备份数据库，在发生灾难时，恢复数据库。 <ul><li>备份恢复: 全量备份，增量备份，差异备份。</li><li>日志恢复: 1. 重做日志: 记录事务对数据的修改。 2.撤销日志：记录事务修改前的数据。</li></ul></li><li>并发控制：并发操作是指在多用户共享的系统中，许多用户可能同时对同一数据进行操作。 <ul><li>排他锁（X锁）：事务对数据加上 X 锁后，只能读取和修改数据，其他事务不能加任何锁。</li><li>共享锁（S锁）：事务对数据加上 S 锁后，只能读取数据，其他事务也只能加 S 锁。</li></ul></li><li>完整性控制： <ul><li>实体完整性：主键约束，确保每个实体的唯一性</li><li>参照完整性：外键约束，确保实体间引用的正确性</li><li>用户定义完整性：符合应用语义的约束条件</li><li>域完整性：属性值必须满足数据类型、格式等约束</li></ul></li><li>安全控制： <ul><li>用户身份鉴别：用户登录时，系统验证用户的身份。</li><li>授权控制：用户对数据库的访问权限。</li><li>数据加密：传输加密、存储加密、备份加密。</li></ul></li></ul><h2 id="_5-sql-语言" tabindex="-1"><a class="header-anchor" href="#_5-sql-语言"><span>5. SQL 语言</span></a></h2>`,36)),s("ul",null,[s("li",null,[e(d,{to:"/notes/A.cs/A3.database/sql.html"},{default:h(()=>t[0]||(t[0]=[p("SQL 语言")])),_:1})])]),t[3]||(t[3]=a('<h2 id="_6-nosql-数据库" tabindex="-1"><a class="header-anchor" href="#_6-nosql-数据库"><span>6. NoSQL 数据库</span></a></h2><h3 id="_6-1-概述" tabindex="-1"><a class="header-anchor" href="#_6-1-概述"><span>6.1 概述</span></a></h3><p>NoSQL 数据库是一种非关系型数据库，它的特点是不使用传统的关系型数据库的行列模型，而是使用键值对、文档型、图形型等模型。NoSQL 数据库的优点是可以存储大量的数据，并且可以根据需要进行扩展。NoSQL 数据库的缺点是不支持事务，不支持复杂的查询，不支持 ACID 事务。举例: Redis，MongoDB。</p><h3 id="_6-2" tabindex="-1"><a class="header-anchor" href="#_6-2"><span>6.2</span></a></h3>',4))])}const m=l(c,[["render",b]]),_=JSON.parse('{"path":"/notes/A.cs/A3.database/","title":"数据库","lang":"zh-CN","frontmatter":{"title":"数据库"},"readingTime":{"minutes":6.14,"words":1841},"git":{"updatedTime":1746585314000,"contributors":[{"name":"Kongber","username":"Kongber","email":"kongmongolia@gmail.com","commits":8,"avatar":"https://avatars.githubusercontent.com/Kongber?v=4","url":"https://github.com/Kongber"},{"name":"Kong","username":"Kong","email":"kongmongolia@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/Kong?v=4","url":"https://github.com/Kong"}]},"filePathRelative":"notes/A.cs/A3.database/README.md","headers":[],"categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"e16fef","sort":10022,"name":"A.cs"},{"id":"b8293a","sort":10024,"name":"A3.database"}]}');export{m as comp,_ as data};
